/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Hero = {
  _type: "hero";
  heading?: string;
};

export type PageBlocks = Array<
  {
    _key: string;
  } & Hero
>;

export type SubMenuResources = {
  _type: "subMenuResources";
  label?: string;
  menuList?: Array<
    {
      _key: string;
    } & NavItem
  >;
  callToAction?: CustomUrl;
};

export type SubMenuDocs = {
  _type: "subMenuDocs";
  title?: string;
  label?: string;
  menuList?: Array<
    {
      _key: string;
    } & NavItem
  >;
  callToAction?: Link;
};

export type SubMenuHighlight = {
  _type: "subMenuHighlight";
  label?: string;
  menuList?: Array<
    {
      _key: string;
    } & NavItem
  >;
};

export type SubMenuBase = {
  _type: "subMenuBase";
  label?: string;
  menuColumns?: Array<
    {
      _key: string;
    } & NavItem
  >;
};

export type Link = {
  _type: "link";
  label?: string;
  description?: string;
  url?: string;
  newTab?: boolean;
};

export type NavItem = {
  _type: "navItem";
  label?: string;
  menuList?: Array<
    {
      _key: string;
    } & Link
  >;
  callToAction?: CustomUrl;
};

export type CustomUrl = {
  _type: "customUrl";
  label?: string;
  url?: string;
  newTab?: boolean;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  metaTitle?: string;
  slug?: Slug;
  metaDescription?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  pageBuilder?: PageBlocks;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Menus = {
  _id: string;
  _type: "menus";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "customImage";
  };
  menu?: Array<
    | ({
        _key: string;
      } & SubMenuBase)
    | ({
        _key: string;
      } & SubMenuHighlight)
    | ({
        _key: string;
      } & SubMenuDocs)
    | ({
        _key: string;
      } & SubMenuResources)
  >;
};

export type CustomImage = {
  _type: "customImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Hero
  | PageBlocks
  | SubMenuResources
  | SubMenuDocs
  | SubMenuHighlight
  | SubMenuBase
  | Link
  | NavItem
  | CustomUrl
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Menus
  | Footer
  | Header
  | CustomImage
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries/allPosts.ts
// Variable: POSTS_QUERY
// Query: *[_type == "blog"]  | order(_createdAt desc) {    "ogImg": ogImage.asset->url,  body,  title,  excerpt,  _createdAt,  _updatedAt,  "categories": categories[]->,  "featuredImg": featuredImage.asset->url,  "featuredImgAlt": featuredImage.alt,  "currentSlug": slug.current,  author-> {      name,  bio,  "authorImage": image.asset->url,  "authorImageAlt": image.alt,  "authorSlug": slug.current,  }}
export type POSTS_QUERYResult = Array<never>;
// Variable: query
// Query: count(*[_type == 'blog'])
export type QueryResult = number;
// Source: ./sanity/lib/queries/categories.ts
// Variable: ALL_CATEGORIES_QUERY
// Query: *[_type == "category"] {  title,  description,  "currentSlug": slug.current,  "categoryImage": image.asset->url,  "categoryImageAlt": image.alt}
export type ALL_CATEGORIES_QUERYResult = Array<never>;
// Source: ./sanity/lib/queries/settings.ts
// Variable: ALL_SETTINGS_QUERY
// Query: {    "header": *[_type == "header"][0] {    "logoImage": logo.asset->url,    "logoImageAlt": logo.alt,    menu [] {      label,      menuColumns [] {        label,        callToAction {          label,          url,          newTab,        }      }    }  },}
export type ALL_SETTINGS_QUERYResult = {
  header: {
    logoImage: string | null;
    logoImageAlt: string | null;
    menu: Array<
      | {
          label: string | null;
          menuColumns: null;
        }
      | {
          label: string | null;
          menuColumns: Array<{
            label: string | null;
            callToAction: {
              label: string | null;
              url: string | null;
              newTab: boolean | null;
            } | null;
          }> | null;
        }
    > | null;
  } | null;
};
// Source: ./sanity/lib/queries/pages/page.ts
// Variable: PAGES_QUERY
// Query: *[_type == "page"] {    metaTitle,  metaDescription,  "ogImg": ogImage.asset->url,  "currentSlug": slug.current,}
export type PAGES_QUERYResult = Array<{
  metaTitle: string | null;
  metaDescription: string | null;
  ogImg: string | null;
  currentSlug: string | null;
}>;
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0] {    metaTitle,  metaDescription,  "ogImg": ogImage.asset->url,  "currentSlug": slug.current,  pageBuilder [] {    _type,      _type == "hero" => {      ...  },  }}
export type PAGE_QUERYResult = {
  metaTitle: string | null;
  metaDescription: string | null;
  ogImg: string | null;
  currentSlug: string | null;
  pageBuilder: Array<{
    _type: "hero";
    _key: string;
    heading?: string;
  }> | null;
} | null;
// Source: ./sanity/lib/queries/pages/post.ts
// Variable: POST_QUERY
// Query: *[_type == "blog" && slug.current == $slug][0] {  body,    "ogImg": ogImage.asset->url,  body,  title,  excerpt,  _createdAt,  _updatedAt,  "categories": categories[]->,  "featuredImg": featuredImage.asset->url,  "featuredImgAlt": featuredImage.alt,  "currentSlug": slug.current,  author-> {      name,  bio,  "authorImage": image.asset->url,  "authorImageAlt": image.alt,  "authorSlug": slug.current,  }}
export type POST_QUERYResult = null;
